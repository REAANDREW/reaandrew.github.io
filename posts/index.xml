<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://reaandrew.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <managingEditor>email@andrewrea.co.uk (Andy Rea)</managingEditor>
    <webMaster>email@andrewrea.co.uk (Andy Rea)</webMaster>
    <lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://reaandrew.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Small script to clean up your AMIs</title>
      <link>https://reaandrew.github.io/posts/script-to-cleanup-amis/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      <author>email@andrewrea.co.uk (Andy Rea)</author>
      <guid>https://reaandrew.github.io/posts/script-to-cleanup-amis/</guid>
      <description>On a little side project I am working on I am creating my own AMIs using Packer and AWS Launch Templates. Whilst developing the AMI you start to get a build up of previous versions along with their associated snapshot. I wanted to have some script which I could run which would remove each AMI and related snapshot prior to me building the next iteration.
WARNING: This script will deregister AMIs even when they are currently used in running ec2 instances.</description>
    </item>
    
    <item>
      <title>Local PGSQL Docker Utility</title>
      <link>https://reaandrew.github.io/posts/local-pgql-docker-util/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <author>email@andrewrea.co.uk (Andy Rea)</author>
      <guid>https://reaandrew.github.io/posts/local-pgql-docker-util/</guid>
      <description>This is a small set of bash scripts to make it really simple to start, stop, connect and load scripts into a local postgres database.
This uses docker, it sets up trust with the host so it can connect using the psql client. It also sets up a local volume in the directory which you launch the utility from which allows the container instances themselves to be transient but still giving you control to destroy the state when required.</description>
    </item>
    
    <item>
      <title>Enumerating Github Repositories in Bash</title>
      <link>https://reaandrew.github.io/posts/enumerating-github-repositories-in-bash/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <author>email@andrewrea.co.uk (Andy Rea)</author>
      <guid>https://reaandrew.github.io/posts/enumerating-github-repositories-in-bash/</guid>
      <description>I needed to get a list of all the repositories for a specific Github Organisation. Github limits the page size which you have use which ruled out a single call with a large value. I was also writing this routine in bash and less is more as they say.
My approach was very simplistic in that it simply tried an incrementing value for next page and if the response was empty then the end of the list had been reached.</description>
    </item>
    
  </channel>
</rss>
